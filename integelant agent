class TableDrivenVacuumCleaner:
    def __init__(self):
        self.rooms = {'A': 'D', 'B': 'D', 'C': 'D', 'D': 'D'}  
        self.current_room = 'A'  

       
        self.action_table = {
            'D': 'Clean',
            'Clean': 'Move'
        }

    def clean(self):
        """Cleans the current room if dirty and updates the state."""
        if self.rooms[self.current_room] == 'D':
            print(f"Cleaning {self.current_room}...")
            self.rooms[self.current_room] = 'Clean'  
        else:
            print(f"{self.current_room} is already clean.")

    def move(self):
        """Moves to the next room based on a predefined sequence."""
        room_sequence = ['A', 'B', 'C', 'D']
        current_index = room_sequence.index(self.current_room)
        if current_index < len(room_sequence) - 1:
            self.current_room = room_sequence[current_index + 1]
            print(f"Moving to room {self.current_room}...")
        else:
            print("No more rooms to move to.")

    def run(self):
        """Executes the cleaning process based on the table-driven approach."""
        while 'D' in self.rooms.values():
            action = self.action_table[self.rooms[self.current_room]]
            if action == 'Clean':
                self.clean()
            if 'D' in self.rooms.values():  
                self.move()
        print("All rooms are clean!")
        print("Final Room States:", self.rooms)

table_agent = TableDrivenVacuumCleaner()
table_agent.run()
